name: Build DFC

on:
  push:
    branches-ignore: [translation]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: ["*"]
    paths-ignore:
      - 'README.md'
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    container: devkitpro/devkitarm
    name: "Build with Docker using devkitARM"
    outputs:
      commit_tag: ${{ steps.build.outputs.commit_tag }}
      commit_message: ${{ steps.build.outputs.commit_message }}
    steps:
      - name: "Checkout repo"
        uses: actions/checkout@v1
        with:
          submodules: recursive
      - name: Install tools
        run: |
          curl -L https://github.com/Universal-Team/bmp2ds/releases/download/v1.0.0/bmp2ds-linux -o bmp2ds
          chmod +x bmp2ds
          mv bmp2ds /usr/local/bin
      - name: Build
        id: build
        run: |
          make

          echo "::set-output name=commit_tag::$(git log --format=%h -1)"
          echo "::set-output name=commit_message::$(git log --pretty=format:'%an - %s' -1)"
      - name: "Publish build to GH Actions"
        uses: actions/upload-artifact@v2
        with:
          path: dfc.nds
          name: "build"

  # Only run this for non-PR jobs.
  publish_build_extras:
    runs-on: ubuntu-latest
    name: "Publish build to Universal-Team/extras"
    if: ${{ success() && !startsWith(github.ref, 'refs/pull') }}
    needs: build
    env:
      COMMIT_TAG: ${{ needs.build.outputs.commit_tag }}
      COMMIT_MESSAGE: ${{ needs.build.outputs.commit_message }}
    outputs:
      current_date: ${{ steps.commit.outputs.current_date }}
    steps:
      - name: "Install tools"
        run: |
          sudo apt-get update
          sudo apt-get install qrencode -y
      - name: "Checkout repo"
        uses: actions/checkout@v1
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: "build"
          path: "build"
      - name: Upload to ${{ github.repository }} release
        if: ${{ startsWith(github.ref, 'refs/tags') }}
        run: |
          ID=$(jq --raw-output '.release.id' $GITHUB_EVENT_PATH)

          for file in ${{ github.workspace }}/build/*; do
            AUTH_HEADER="Authorization: token ${{ secrets.GITHUB_TOKEN }}"
            CONTENT_LENGTH="Content-Length: $(stat -c%s $file)"
            CONTENT_TYPE="Content-Type: application/7z-x-compressed"
            UPLOAD_URL="https://uploads.github.com/repos/${{ github.repository }}/releases/$ID/assets?name=$(basename $file)"

            curl -XPOST -H "$AUTH_HEADER" -H "$CONTENT_LENGTH" -H "$CONTENT_TYPE" --upload-file "$file" "$UPLOAD_URL"
          done

  # send_webhook_success:
  #   runs-on: ubuntu-latest
  #   needs: [publish_build_extras, build]
  #   name: "Send Discord success webhook"
  #   if: ${{ success() && !startsWith(github.ref, 'refs/pull') }}
  #   env:
  #     CURRENT_DATE: ${{ needs.publish_build_extras.outputs.current_date }}
  #   steps:
  #     - name: "Checkout repo"
  #       uses: actions/checkout@v1
  #     - name: "Send success webhook"
  #       run: |
  #         curl -o send.sh https://raw.githubusercontent.com/Universal-Team/discord-webhooks/master/send-ghactions.sh
  #         chmod +x send.sh
  #         ./send.sh success ${{ secrets.WEBHOOK_URL }}

  # send_webhook_failure:
  #   runs-on: ubuntu-latest
  #   needs: [publish_build_extras, build]
  #   name: "Send Discord failure webhook"
  #   if: ${{ failure() && !startsWith(github.ref, 'refs/pull') }}
  #   env:
  #     CURRENT_DATE: ${{ needs.publish_build_extras.outputs.current_date }}
  #   steps:
  #     - name: "Checkout repo"
  #       uses: actions/checkout@v1
  #     - name: "Send failure webhook"
  #       run: |
  #         curl -o send.sh https://raw.githubusercontent.com/Universal-Team/discord-webhooks/master/send-ghactions.sh
  #         chmod +x send.sh
  #         ./send.sh failure ${{ secrets.WEBHOOK_URL }}
